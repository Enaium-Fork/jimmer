import java.time.LocalDateTime
import testpkg.annotations.{Job, Task, Priority, Shallow, Deep }
import testpkg.configurations.AuthorFilter
import testpkg.{Named, TagProvider}

/**
 * The BookView DTO
 */
@Shallow
BookView implements Named {

    /**
     * The id of BookView
     */
    @Shallow
    name

    @Shallow
    edition

    @Shallow
    id

    store @Deep implements Named {
        @Deep
        name
    }

    authors /** Nested DTO: BookView.TargetOf_authors */@Deep {

        /**
         * The firstName of author DTO
         */
        @Deep
        firstName

        @Deep
        lastName
    }
}

input BookInput {
    #allScalars

    @javax.validation.constraints.NotNull
    id

    id(store)
    id(authors) as authorIds
}

unsafe input CompositeBookInput {
    #allScalars
    store! {
        #allScalars
        -id
    }
    authors {
        #allScalars
        -id
    }
}

input BookNullableInput {
    #allScalars
    store {
        #allScalars
    }
}

input BookNullableIdInput {
    #allScalars
    id(store)
}

BookView2 {
    #allScalars(this)
    authorIds
}

BookViewForTupleTest {
    id
    name
    store {
        id
        name
    }
}

dynamic input DynamicBookInput {
    name?
    edition?
    price?
    id(store) as storeId
    id(authors)? as authorIds
}

dynamic input DynamicBookInput2 {
    name?
    edition?
    price?
    flat(store) {
        as(^ -> parent) {
            name
            website
        }
    }
}

input FuzzyBookInput {
    fuzzy name?
    fuzzy edition?
    fuzzy price?
    fuzzy id(store) as storeId
    fuzzy id(authors)? as authorIds
}

specification BookSpecification implements TagProvider {

    #allScalars(Book)

    @Job(value = [
        Task("Prepare environment", priority = Priority.HIGH, estimation = 4),
        Task("Install intellij", estimation = 1),
        Task("Develop Service", estimation = 800),
        Task(value = "Develop UI", priority = Priority.LOW, estimation = 100)
    ])
    notNull(store)
    
    tag1: Int
    tag2: Int
    tag3: Map<String, Set<String>>
    tag4: MutableMap<String, MutableSet<String>>
    tag5: Array<Int>
    tag6: Array<Int?>
    tag7: LocalDateTime
    tag8: Any
    tag9: Array<*>
    tag10: Array<Any>
    tag11: List<*>
    tag12: MutableList<*>
    tag13: List<Any>
    tag14: MutableList<Any>
}

specification BookSpecification2 {
    #allScalars(this)
    valueIn(id) as ids
    ge(price)
    le(price)
    associatedIdIn(store)
    associatedIdNotIn(store)
    associatedIdIn(authors) as authorIds
    associatedIdNotIn(authors) as excludedAuthorIds
}

specification BookSpecification3 {
    #allScalars(this)
    valueIn(id) as ids
    ge(price)
    le(price)
    store {
        #allScalars(this)
        ge(name)
        le(name)
    }
    authors {
        #allScalars(this)
        like/i(firstName, lastName) as name
    }
}

specification BookSpecification4 {
    #allScalars(this)
    valueIn(id) as ids
    ge(price)
    le(price)
    flat(store) {
        as(^ -> parent) {
            ge(name)
            le(name)
            website
        }
    }
    flat(authors) {
        like/i(firstName, lastName) as authorName
    }
}

BookDeepView {
    authors {
        gender
        books {
            authors {
                gender
                books {
                    authors {
                        gender
                    }
                }
            }
        }
    }
}

dynamic input MixedBookInput {
    fixed id?
    static name?
    dynamic edition?
    fuzzy price?
}

fixed input BookInputWithFixedParent {
    id(store)
}

static input BookInputWithStaticParent {
    id(store)
}

dynamic input BookInputWithDynamicParent {
    id(store)
}

fuzzy input BookInputWithFuzzyParent {
    id(store)
}

unsafe UnsafeBookView {
    #allScalars
    store! {
        #allScalars
    }
    authors {
        #allScalars
    }
}

BookViewForIssue843 {
    #allScalars
    @com.fasterxml.jackson.annotation.JsonIgnore
    edition
}

BookViewWithConfiguration {

    #allScalars

    !fetchType(JOIN_ALWAYS)
    store {
        name
    }

    !where(firstName <> 'Alex' and lastName <> 'Banks')
    !orderBy(firstName, lastName)
    authors {
        firstName
        lastName
    }
}

BookViewWithConfiguration2 {
    #allScalars

    !filter(AuthorFilter)
    authors {
        firstName
        lastName
    }
}